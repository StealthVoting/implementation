/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Voting, VotingInterface } from "../../contracts/Voting";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "choiceCode",
        type: "uint256",
      },
    ],
    name: "castVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "partyCode",
        type: "uint256",
      },
    ],
    name: "getElectionResult",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "parties",
    outputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "code",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "code",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "registerParty",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registerVoter",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bool",
        name: "isVoted",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "choiceCode",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "votes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061064d806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635df813301161005b5780635df81330146100dd57806370651a18146100fd578063a3ec138d1461011e578063ecb617d91461017157600080fd5b806323fc4b36146100825780633eb76b9c146100b557806341120c10146100ca575b600080fd5b6100a261009036600461045c565b60009081526002602052604090205490565b6040519081526020015b60405180910390f35b6100c86100c336600461045c565b6101cc565b005b6100c86100d836600461048b565b6102d7565b6100a26100eb36600461045c565b60026020526000908152604090205481565b61011061010b36600461045c565b61031f565b6040516100ac929190610546565b61015261012c3660046105a3565b60006020819052908152604090208054600182015460029092015460ff91821692911683565b60408051931515845260208401929092521515908201526060016100ac565b6100c86040805160608101825260008082526020808301828152600184860181815233855292849052949092209251835490151560ff1991821617845591519383019390935591516002909101805491151591909216179055565b3360009081526020819052604090206002015460ff166102335760405162461bcd60e51b815260206004820152601860248201527f566f746572206973206e6f7420726567697374657265642e000000000000000060448201526064015b60405180910390fd5b3360009081526020819052604090205460ff16156102935760405162461bcd60e51b815260206004820152601460248201527f566f74657220616c726561647920766f7465642e000000000000000000000000604482015260640161022a565b6000818152600260205260409020546102ad9060016105e0565b6000918252600260209081526040808420929092553383528290529020805460ff19166001179055565b604080518082018252828152602080820185905260008581526001825292909220815180519293919261030d92849201906103c3565b50602082015181600101559050505050565b60016020526000908152604090208054819061033a90610606565b80601f016020809104026020016040519081016040528092919081815260200182805461036690610606565b80156103b35780601f10610388576101008083540402835291602001916103b3565b820191906000526020600020905b81548152906001019060200180831161039657829003601f168201915b5050505050908060010154905082565b8280546103cf90610606565b90600052602060002090601f0160209004810192826103f15760008555610437565b82601f1061040a57805160ff1916838001178555610437565b82800160010185558215610437579182015b8281111561043757825182559160200191906001019061041c565b50610443929150610447565b5090565b5b808211156104435760008155600101610448565b60006020828403121561046e57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561049e57600080fd5b82359150602083013567ffffffffffffffff808211156104bd57600080fd5b818501915085601f8301126104d157600080fd5b8135818111156104e3576104e3610475565b604051601f8201601f19908116603f0116810190838211818310171561050b5761050b610475565b8160405282815288602084870101111561052457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b604081526000835180604084015260005b818110156105745760208187018101516060868401015201610557565b81811115610586576000606083860101525b50602083019390935250601f91909101601f191601606001919050565b6000602082840312156105b557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105d957600080fd5b9392505050565b6000821982111561060157634e487b7160e01b600052601160045260246000fd5b500190565b600181811c9082168061061a57607f821691505b60208210810361063a57634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c634300080d000a";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Voting> {
    return super.deploy(overrides || {}) as Promise<Voting>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Voting {
    return super.attach(address) as Voting;
  }
  override connect(signer: Signer): Voting__factory {
    return super.connect(signer) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new utils.Interface(_abi) as VotingInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Voting {
    return new Contract(address, _abi, signerOrProvider) as Voting;
  }
}
