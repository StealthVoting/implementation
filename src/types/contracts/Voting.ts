/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface VotingInterface extends utils.Interface {
  functions: {
    "castVote(uint256)": FunctionFragment;
    "getElectionResult(uint256)": FunctionFragment;
    "parties(uint256)": FunctionFragment;
    "registerParty(uint256,string)": FunctionFragment;
    "registerVoter()": FunctionFragment;
    "voters(address)": FunctionFragment;
    "votes(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castVote"
      | "getElectionResult"
      | "parties"
      | "registerParty"
      | "registerVoter"
      | "voters"
      | "votes"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parties",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerParty",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [string]): string;
  encodeFunctionData(functionFragment: "votes", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getElectionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "parties", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerParty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;

  events: {};
}

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      choiceCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getElectionResult(
      partyCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    parties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; code: BigNumber }>;

    registerParty(
      code: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerVoter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isVoted: boolean;
        choiceCode: BigNumber;
        isRegistered: boolean;
      }
    >;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  castVote(
    choiceCode: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getElectionResult(
    partyCode: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  parties(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; code: BigNumber }>;

  registerParty(
    code: BigNumberish,
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerVoter(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber, boolean] & {
      isVoted: boolean;
      choiceCode: BigNumber;
      isRegistered: boolean;
    }
  >;

  votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    castVote(
      choiceCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getElectionResult(
      partyCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; code: BigNumber }>;

    registerParty(
      code: BigNumberish,
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVoter(overrides?: CallOverrides): Promise<void>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber, boolean] & {
        isVoted: boolean;
        choiceCode: BigNumber;
        isRegistered: boolean;
      }
    >;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    castVote(
      choiceCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getElectionResult(
      partyCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    parties(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    registerParty(
      code: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerVoter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    voters(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    votes(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      choiceCode: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getElectionResult(
      partyCode: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parties(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerParty(
      code: BigNumberish,
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerVoter(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
