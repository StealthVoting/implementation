/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface BlindSignInterface extends utils.Interface {
  functions: {
    "AA()": FunctionFragment;
    "BnB()": FunctionFragment;
    "GX()": FunctionFragment;
    "GY()": FunctionFragment;
    "PP()": FunctionFragment;
    "Qx()": FunctionFragment;
    "Qy()": FunctionFragment;
    "l1()": FunctionFragment;
    "l2()": FunctionFragment;
    "n()": FunctionFragment;
    "r1Dash()": FunctionFragment;
    "r2Dash()": FunctionFragment;
    "requestBlindSignature(uint256,uint256)": FunctionFragment;
    "verifyBlindSignature(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "xr1Dash()": FunctionFragment;
    "xr2Dash()": FunctionFragment;
    "yr1Dash()": FunctionFragment;
    "yr2Dash()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AA"
      | "BnB"
      | "GX"
      | "GY"
      | "PP"
      | "Qx"
      | "Qy"
      | "l1"
      | "l2"
      | "n"
      | "r1Dash"
      | "r2Dash"
      | "requestBlindSignature"
      | "verifyBlindSignature"
      | "xr1Dash"
      | "xr2Dash"
      | "yr1Dash"
      | "yr2Dash"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AA", values?: undefined): string;
  encodeFunctionData(functionFragment: "BnB", values?: undefined): string;
  encodeFunctionData(functionFragment: "GX", values?: undefined): string;
  encodeFunctionData(functionFragment: "GY", values?: undefined): string;
  encodeFunctionData(functionFragment: "PP", values?: undefined): string;
  encodeFunctionData(functionFragment: "Qx", values?: undefined): string;
  encodeFunctionData(functionFragment: "Qy", values?: undefined): string;
  encodeFunctionData(functionFragment: "l1", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2", values?: undefined): string;
  encodeFunctionData(functionFragment: "n", values?: undefined): string;
  encodeFunctionData(functionFragment: "r1Dash", values?: undefined): string;
  encodeFunctionData(functionFragment: "r2Dash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestBlindSignature",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBlindSignature",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "xr1Dash", values?: undefined): string;
  encodeFunctionData(functionFragment: "xr2Dash", values?: undefined): string;
  encodeFunctionData(functionFragment: "yr1Dash", values?: undefined): string;
  encodeFunctionData(functionFragment: "yr2Dash", values?: undefined): string;

  decodeFunctionResult(functionFragment: "AA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BnB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Qx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Qy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "n", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r1Dash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "r2Dash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestBlindSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBlindSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xr1Dash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "xr2Dash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yr1Dash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yr2Dash", data: BytesLike): Result;

  events: {};
}

export interface BlindSign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlindSignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AA(overrides?: CallOverrides): Promise<[BigNumber]>;

    BnB(overrides?: CallOverrides): Promise<[BigNumber]>;

    GX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GY(overrides?: CallOverrides): Promise<[BigNumber]>;

    PP(overrides?: CallOverrides): Promise<[BigNumber]>;

    Qx(overrides?: CallOverrides): Promise<[BigNumber]>;

    Qy(overrides?: CallOverrides): Promise<[BigNumber]>;

    l1(overrides?: CallOverrides): Promise<[BigNumber]>;

    l2(overrides?: CallOverrides): Promise<[BigNumber]>;

    n(overrides?: CallOverrides): Promise<[BigNumber]>;

    r1Dash(overrides?: CallOverrides): Promise<[BigNumber]>;

    r2Dash(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestBlindSignature(
      m1Dash: BigNumberish,
      m2Dash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { s1Dash: BigNumber; s2Dash: BigNumber }
    >;

    verifyBlindSignature(
      s: BigNumberish,
      Rx: BigNumberish,
      Ry: BigNumberish,
      r: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;

    xr1Dash(overrides?: CallOverrides): Promise<[BigNumber]>;

    xr2Dash(overrides?: CallOverrides): Promise<[BigNumber]>;

    yr1Dash(overrides?: CallOverrides): Promise<[BigNumber]>;

    yr2Dash(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  AA(overrides?: CallOverrides): Promise<BigNumber>;

  BnB(overrides?: CallOverrides): Promise<BigNumber>;

  GX(overrides?: CallOverrides): Promise<BigNumber>;

  GY(overrides?: CallOverrides): Promise<BigNumber>;

  PP(overrides?: CallOverrides): Promise<BigNumber>;

  Qx(overrides?: CallOverrides): Promise<BigNumber>;

  Qy(overrides?: CallOverrides): Promise<BigNumber>;

  l1(overrides?: CallOverrides): Promise<BigNumber>;

  l2(overrides?: CallOverrides): Promise<BigNumber>;

  n(overrides?: CallOverrides): Promise<BigNumber>;

  r1Dash(overrides?: CallOverrides): Promise<BigNumber>;

  r2Dash(overrides?: CallOverrides): Promise<BigNumber>;

  requestBlindSignature(
    m1Dash: BigNumberish,
    m2Dash: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { s1Dash: BigNumber; s2Dash: BigNumber }>;

  verifyBlindSignature(
    s: BigNumberish,
    Rx: BigNumberish,
    Ry: BigNumberish,
    r: BigNumberish,
    m: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  xr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

  xr2Dash(overrides?: CallOverrides): Promise<BigNumber>;

  yr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

  yr2Dash(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BnB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    Qx(overrides?: CallOverrides): Promise<BigNumber>;

    Qy(overrides?: CallOverrides): Promise<BigNumber>;

    l1(overrides?: CallOverrides): Promise<BigNumber>;

    l2(overrides?: CallOverrides): Promise<BigNumber>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    r1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    r2Dash(overrides?: CallOverrides): Promise<BigNumber>;

    requestBlindSignature(
      m1Dash: BigNumberish,
      m2Dash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { s1Dash: BigNumber; s2Dash: BigNumber }
    >;

    verifyBlindSignature(
      s: BigNumberish,
      Rx: BigNumberish,
      Ry: BigNumberish,
      r: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    xr2Dash(overrides?: CallOverrides): Promise<BigNumber>;

    yr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    yr2Dash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BnB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    Qx(overrides?: CallOverrides): Promise<BigNumber>;

    Qy(overrides?: CallOverrides): Promise<BigNumber>;

    l1(overrides?: CallOverrides): Promise<BigNumber>;

    l2(overrides?: CallOverrides): Promise<BigNumber>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    r1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    r2Dash(overrides?: CallOverrides): Promise<BigNumber>;

    requestBlindSignature(
      m1Dash: BigNumberish,
      m2Dash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlindSignature(
      s: BigNumberish,
      Rx: BigNumberish,
      Ry: BigNumberish,
      r: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    xr2Dash(overrides?: CallOverrides): Promise<BigNumber>;

    yr1Dash(overrides?: CallOverrides): Promise<BigNumber>;

    yr2Dash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BnB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Qx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Qy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    n(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    r1Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    r2Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestBlindSignature(
      m1Dash: BigNumberish,
      m2Dash: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBlindSignature(
      s: BigNumberish,
      Rx: BigNumberish,
      Ry: BigNumberish,
      r: BigNumberish,
      m: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xr1Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xr2Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yr1Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    yr2Dash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
