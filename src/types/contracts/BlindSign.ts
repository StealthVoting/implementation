/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface BlindSignInterface extends utils.Interface {
  functions: {
    "AA()": FunctionFragment;
    "BB()": FunctionFragment;
    "GX()": FunctionFragment;
    "GY()": FunctionFragment;
    "Hx()": FunctionFragment;
    "Hy()": FunctionFragment;
    "PP()": FunctionFragment;
    "Yx()": FunctionFragment;
    "Yy()": FunctionFragment;
    "getH()": FunctionFragment;
    "getY()": FunctionFragment;
    "n()": FunctionFragment;
    "requestBlindSignature(uint256)": FunctionFragment;
    "verifyBlindSignature(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AA"
      | "BB"
      | "GX"
      | "GY"
      | "Hx"
      | "Hy"
      | "PP"
      | "Yx"
      | "Yy"
      | "getH"
      | "getY"
      | "n"
      | "requestBlindSignature"
      | "verifyBlindSignature"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "AA", values?: undefined): string;
  encodeFunctionData(functionFragment: "BB", values?: undefined): string;
  encodeFunctionData(functionFragment: "GX", values?: undefined): string;
  encodeFunctionData(functionFragment: "GY", values?: undefined): string;
  encodeFunctionData(functionFragment: "Hx", values?: undefined): string;
  encodeFunctionData(functionFragment: "Hy", values?: undefined): string;
  encodeFunctionData(functionFragment: "PP", values?: undefined): string;
  encodeFunctionData(functionFragment: "Yx", values?: undefined): string;
  encodeFunctionData(functionFragment: "Yy", values?: undefined): string;
  encodeFunctionData(functionFragment: "getH", values?: undefined): string;
  encodeFunctionData(functionFragment: "getY", values?: undefined): string;
  encodeFunctionData(functionFragment: "n", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestBlindSignature",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyBlindSignature",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(functionFragment: "AA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "BB", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GX", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Hx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Hy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Yx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Yy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getY", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "n", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestBlindSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyBlindSignature",
    data: BytesLike
  ): Result;

  events: {};
}

export interface BlindSign extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BlindSignInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AA(overrides?: CallOverrides): Promise<[BigNumber]>;

    BB(overrides?: CallOverrides): Promise<[BigNumber]>;

    GX(overrides?: CallOverrides): Promise<[BigNumber]>;

    GY(overrides?: CallOverrides): Promise<[BigNumber]>;

    Hx(overrides?: CallOverrides): Promise<[BigNumber]>;

    Hy(overrides?: CallOverrides): Promise<[BigNumber]>;

    PP(overrides?: CallOverrides): Promise<[BigNumber]>;

    Yx(overrides?: CallOverrides): Promise<[BigNumber]>;

    Yy(overrides?: CallOverrides): Promise<[BigNumber]>;

    getH(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { hX: BigNumber; hY: BigNumber }>;

    getY(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { yX: BigNumber; yY: BigNumber }>;

    n(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestBlindSignature(
      u2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { z: BigNumber }>;

    verifyBlindSignature(
      ZdashX: BigNumberish,
      ZdashY: BigNumberish,
      KX: BigNumberish,
      KY: BigNumberish,
      MX: BigNumberish,
      MY: BigNumberish,
      PX: BigNumberish,
      PY: BigNumberish,
      u1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isValid: boolean }>;
  };

  AA(overrides?: CallOverrides): Promise<BigNumber>;

  BB(overrides?: CallOverrides): Promise<BigNumber>;

  GX(overrides?: CallOverrides): Promise<BigNumber>;

  GY(overrides?: CallOverrides): Promise<BigNumber>;

  Hx(overrides?: CallOverrides): Promise<BigNumber>;

  Hy(overrides?: CallOverrides): Promise<BigNumber>;

  PP(overrides?: CallOverrides): Promise<BigNumber>;

  Yx(overrides?: CallOverrides): Promise<BigNumber>;

  Yy(overrides?: CallOverrides): Promise<BigNumber>;

  getH(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { hX: BigNumber; hY: BigNumber }>;

  getY(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { yX: BigNumber; yY: BigNumber }>;

  n(overrides?: CallOverrides): Promise<BigNumber>;

  requestBlindSignature(
    u2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  verifyBlindSignature(
    ZdashX: BigNumberish,
    ZdashY: BigNumberish,
    KX: BigNumberish,
    KY: BigNumberish,
    MX: BigNumberish,
    MY: BigNumberish,
    PX: BigNumberish,
    PY: BigNumberish,
    u1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    Hx(overrides?: CallOverrides): Promise<BigNumber>;

    Hy(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    Yx(overrides?: CallOverrides): Promise<BigNumber>;

    Yy(overrides?: CallOverrides): Promise<BigNumber>;

    getH(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { hX: BigNumber; hY: BigNumber }>;

    getY(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { yX: BigNumber; yY: BigNumber }>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    requestBlindSignature(
      u2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlindSignature(
      ZdashX: BigNumberish,
      ZdashY: BigNumberish,
      KX: BigNumberish,
      KY: BigNumberish,
      MX: BigNumberish,
      MY: BigNumberish,
      PX: BigNumberish,
      PY: BigNumberish,
      u1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    AA(overrides?: CallOverrides): Promise<BigNumber>;

    BB(overrides?: CallOverrides): Promise<BigNumber>;

    GX(overrides?: CallOverrides): Promise<BigNumber>;

    GY(overrides?: CallOverrides): Promise<BigNumber>;

    Hx(overrides?: CallOverrides): Promise<BigNumber>;

    Hy(overrides?: CallOverrides): Promise<BigNumber>;

    PP(overrides?: CallOverrides): Promise<BigNumber>;

    Yx(overrides?: CallOverrides): Promise<BigNumber>;

    Yy(overrides?: CallOverrides): Promise<BigNumber>;

    getH(overrides?: CallOverrides): Promise<BigNumber>;

    getY(overrides?: CallOverrides): Promise<BigNumber>;

    n(overrides?: CallOverrides): Promise<BigNumber>;

    requestBlindSignature(
      u2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyBlindSignature(
      ZdashX: BigNumberish,
      ZdashY: BigNumberish,
      KX: BigNumberish,
      KY: BigNumberish,
      MX: BigNumberish,
      MY: BigNumberish,
      PX: BigNumberish,
      PY: BigNumberish,
      u1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    BB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Hx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Hy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Yx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Yy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    n(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestBlindSignature(
      u2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyBlindSignature(
      ZdashX: BigNumberish,
      ZdashY: BigNumberish,
      KX: BigNumberish,
      KY: BigNumberish,
      MX: BigNumberish,
      MY: BigNumberish,
      PX: BigNumberish,
      PY: BigNumberish,
      u1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
